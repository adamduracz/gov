#!/usr/bin/perl -w
# -*-cperl-*-
#=============================================================================
#
# DESCRIPTION
#   Active Democracy Server
#
# AUTHOR
#   Fredrik Liljegren   <fredrik@liljegren.org>
#
# COPYRIGHT
#   Copyright (C) 2009-2011 Fredrik Liljegren.
#
#   This module is free software; you can redistribute it and/or
#   modify it under the same terms as Perl itself.
#
#=============================================================================

use 5.010;
use strict;
use warnings;

our $VERSION = "0.91";
our $CFG;

BEGIN
{
    use FindBin;
    my $configfile = $FindBin::Bin . "/../etc/server.conf";

    $CFG = do $configfile
      or die "Failed to load config $configfile: $! ($@)\n";

    push @INC, $CFG->{'gov_root'}.'/lib';
    push @INC, $CFG->{'rb_root'}.'/lib';
    push @INC, $CFG->{'paraframe'}. "/lib";
#    push @INC, $CFG->{'email_classifier'}. '/lib';

    print "Starting GOV\n";

    use FindBin;
    use Cwd 'abs_path';
}

use strict;
use locale;

use Scalar::Util qw( looks_like_number );

use Para::Frame 1.16;
use Para::Frame::DBIx;
use Para::Frame::Email;
use Para::Frame::Email::Address;
use Para::Frame::Utils qw( chmod_tree );
use Para::Frame::Watchdog;
use Para::Frame::Site;

use Rit::Base 6.63;
use Rit::Base::Constants;
use Rit::Base::Utils;
use Rit::Base::Resource;
use Rit::Base::Arc;
use Rit::Base::Search;
use Rit::Base::Pred;
use Rit::Base::Rule;
use Rit::Base::Literal::Time;
use Rit::Base::Site;

use GOV;
use GOV::Go;
use GOV::User::Meta;
use GOV::Proposition;
use GOV::Session;
use GOV::DB;

{
    # Do not daemonize if run with cmdline argument
    my $daemonize = @ARGV ? 0 : 1;

    unless( $CFG )
    {
	die "Configuration missing";
    }

    GOV->store_cfg( $CFG );


    Para::Frame::Site->add({
	# Path in  URL to website
	'code'       => 'gov',
        'name'       => 'GOV',
	'approot'    => $CFG->{'gov_root'}."/site/para",
	'webhome'    => $CFG->{'site'}{'gov'}{'webhome'}||'',
	'webhost'    => $CFG->{'site'}{'gov'}{'webhost'}||$CFG->{'webhost'},
#	'aliases'    => ['paranormal.se:443'],
#	'last_step'  => "/member/db/",
	'backup_host'=> $CFG->{'site'}{'gov'}{'backup_host'},
#	'is_compiled' => 1,
	'loadpage'    => "/pf/loading.html",
	'languages'       => ($CFG->{'languages'} || ['en']),
	'params'     =>
	{
	    'css'        => {
			     persistent => [
					    "pf/css/paraframe.css_tt",
					    "style.css?v=2"
					   ],
			    },
	},
	  'recaptcha_key_public' => $CFG->{site}{gov}{recaptcha_key_public},
	  'recaptcha_key_private' => $CFG->{site}{gov}{recaptcha_key_private},
    });

    warn "webhome: ". $CFG->{'site'}{'gov'}{'webhome'}."\n";

    my $appback = [$CFG->{'gov_root'}, $CFG->{'rb_root'}];
    my $gov_root = $CFG->{'gov_root'};

    $CFG->{'debug'} ||= 1;
    if( looks_like_number($ARGV[0]) )
    {
	$CFG->{'debug'} = $ARGV[0];
    }

    my $cfg =
    {
     'paraframe'       => $CFG->{'paraframe'},
     'rb_root'         => $CFG->{'rb_root'},
     'paraframe_group' => $CFG->{'paraframe_group'}||'psi_cgi',

     'appback'         => $appback,
     'appbase'         => 'GOV',
     'appfmly'         => 'Rit::Base',
#     'tt_plugins'      => 'Rit::Guides::Template::Plugin',
#     'worker_startup'    => ( $CFG->{'worker_startup'} // 1),
#     'user_class'      => 'Rit::Base::User::Meta',
     'user_class'      => 'GOV::User::Meta',
#     'session_class'   => 'Rit::Base::Session',
     'session_class'   => 'GOV::Session',
#     'resource_class'  => 'Para::Resource',
     'search_collection_class' => 'Rit::Base::Search::Collection',
     'search_result_class'     => 'Rit::Base::Search::Result',
     'l10n_class'      => 'Rit::Base::L10N',
     'site_class'      => 'Rit::Base::Site',
#     'find_class'      => 'GOV::Go',
     'md5_salt'        => $CFG->{'md5_salt'},
     'cas_url'         => $CFG->{'cas_url'},
     'wp_json_url'     => $CFG->{'wp_json_url'},

#     'rb_default_source' => 'paranormal_sweden_creation',

#     'bg_user_code'    => sub{ Rit::Base::Resource->get_by_constant_label('creation') },
     'logfile'         => "$gov_root/logs/gov.log",
     'pidfile'         => "$gov_root/var/gov.pid",
     'dir_var'         => "$gov_root/var",

     'port'            => $CFG->{'port'},
     'debug'           => $CFG->{'debug'} || 0,
     'do_bgjob'        => $CFG->{'do_bgjob'},
     'umask'           => 0007,
     'languages'       => ['sv','en'],
     'time_stringify'  => 1,
     'site_autodetect' => 0,
     'site_auto'       => 1,
     'send_email'      => $CFG->{'send_email'},
     'email'           => $CFG->{'email'},
     'gov_version'     => $VERSION,
   };
    Para::Frame->configure( $cfg );
#    Para->on_configure();

    # Check those...
    $Rit::Base::LOOKUP_CLASS_FOR{$cfg->{'user_class'}} = 1;


    # Configure database
    #
    $Rit::dbix = Para::Frame::DBIx ->
	new({
	    connect => $CFG->{'dbconnect'},
	    import_tt_params => 1,
	});


    # Attatch code to hooks
    #

    Para::Frame->add_hook('on_startup', sub
			  {
			      $Rit::dbix->connect;
#			      Para::Setup->setup_db;
			  });

    Para::Frame->add_hook('on_ritbase_ready', sub
			  {
			      GOV::DB->initialize;
			      $Para::Frame::CFG->{'gov_db_version'} =
				Rit::Base::Constants->get('gov_db')
				    ->has_version->plain;
			  });


    if( $CFG->{'cas_url'} )
    {
	Para::Frame->add_hook('on_first_response', \&GOV::Session::cas_login);
    }


    Para::Frame->add_hook('add_background_jobs', \&GOV::run_background_jobs);


    Rit::Base->init();


    my $global_params =
    {
     now             => \&Rit::Base::Literal::Time::now,
     date            => \&Rit::Base::Literal::Time::date,

     favicon         => "aktiv-demokrati-logo-90x90.png",
    };
    Para::Frame->add_global_tt_params( $global_params );


#    # Assign extra handlers for Burner
#    #
#    my $burner_plain = Para::Frame::Burner->get_by_type('plain');
#    $burner_plain->add_ext('htaccess');


    if( $ARGV[0] and not looks_like_number($ARGV[0]) )
    {
	Para::Frame->startup;
	Para::Frame::start_loop() if $ARGV[0] eq 'no_watchdog';
	print "Server stops\n";
	Para::Frame->kill_children;
	exit;
    }

    $Para::Frame::Watchdog::LIMIT_SYSTOTAL = $CFG->{'limit_systotal'} || 1.2;

    if( $daemonize )
    {
	Para::Frame->daemonize( 1 );
    }
    else
    {
	Para::Frame->watchdog_startup();
    }
}

#########################################################
